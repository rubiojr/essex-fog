{"name":"Essex-Fog","body":"# Getting started with Fog and OpenStack Essex \r\n\r\nBefore we start, make sure you have Essex support in Fog.\r\n\r\nEssex support has not been merged into Fog upstream so you'll need\r\na custom Fog build to work through the tutorial.\r\n\r\nGet the custom gem build from http://rubiojr.frameos.org/fog-1.3.1-essex.gem or build fog\r\nyourself from https://github.com/MorphGlobal/fog/tree/morph_merge.\r\n\r\nFollow the merge here if you are interested:\r\n\r\nhttps://github.com/fog/fog/issues/848\r\n\r\nIt's a good idea to have OpenStack clients installed to explore other commands.\r\nYou can install them in Ubuntu with the following command:\r\n\r\n    sudo apt-get install python-novaclient glance-client python-keystoneclient\r\n\r\n    \r\nLet's get started:\r\n\r\n    require 'fog'\r\n    \r\n## Connect and authenticate\r\n\r\n    conn = Fog::Compute.new({\r\n      :provider => 'OpenStack',\r\n      :openstack_api_key => \"changeme\",\r\n      :openstack_username => \"admin@myfoobar-stack.net\",\r\n      :openstack_auth_url => \"http://auth.myfoobar-stack.net:5000/v2.0/tokens\"\r\n    })\r\n\r\n**openstack_auth_url** is the URL of the Keystone authentication server in this case.\r\n\r\n**openstack_api_key** is the password I use to login to the dashboard (Horizon) and use the API.\r\n\r\n    \r\n## Find the server flavor we want.\r\n\r\n    flavor = conn.flavors.find { |f| f.name == 'm1.tiny' }\r\n\r\nm1.tiny has 512 MB of RAM and no additional ephemeral storage. List the flavors available with the command 'nova flavor-list'.\r\n\r\n    \r\n## Find the server image/template we want\r\n\r\n    image = conn.images.find { |i| i.name == 'ubuntu-precise-amd64' }\r\n\r\nList the images available with 'nova image-list' or glance index.\r\n    \r\n## Create the server\r\n\r\n    server = conn.servers.create :name => \"fooserver-#{Time.now.strftime '%Y%m%d'}\",\r\n                                 :image_ref => image.id,\r\n                                 :flavor_ref => flavor.id,\r\n                                 :key_name => 'my-foo-keypair' # optional\r\n\r\nThis will create the server asynchronously, since waiting for server.ready? is optional.\r\nkey_name is optional and is used to inject the specified keypair \r\nto the instance if cloud-init is present. You can then login via SSH without\r\npassword, among other things (https://help.ubuntu.com/community/CloudInit)\r\n\r\nList currently available keypairs with 'nova keypair-list'\r\n    \r\nWait for the server to be ready (optional, wait for state == 'ACTIVE'):\r\n\r\n    server.wait_for { ready? }\r\n    \r\nYou can also check the status of the server with 'nova list':\r\n    \r\n\r\n    +--------------------------------------+-----------------+--------+-------------------+\r\n    |                  ID                  |       Name      | Status |      Networks     |\r\n    +--------------------------------------+-----------------+--------+-------------------+\r\n    | e56b9306-063a-4622-89cb-b5069f805221 | foobar-20120428 | BUILD  | private=1.2.3.4   |\r\n    +--------------------------------------+-----------------+--------+-------------------+\r\n    \r\n## List the servers currently running (active or building)\r\n\r\n    conn.servers.each do |s|\r\n      puts s.name # server name\r\n      puts s.state\r\n      puts s.id\r\n    end\r\n    \r\n## Associate a public IP to the server\r\n\r\n    ip = conn.addresses.find { |ip| ip.instance_id.nil? }\r\n\r\nIf we find a free IP, not being used by any instance, use that. Otherwise, create it:\r\n    \r\n    if ip.nil?\r\n      puts 'Creating IP...'\r\n      ip = conn.addresses.create\r\n    end\r\n\r\nAssociate the IP address to the server:\r\n\r\n    ip.server = server\r\n    \r\n## Cleanup or regret it, @geemus dixit\r\n\r\n    ip.destroy\r\n    server.destroy\r\n","tagline":"Fog OpenStack Tutorial, Essex Edition","google":"UA-3296835-17","note":"Don't delete this file! It's used internally to help with page regeneration."}